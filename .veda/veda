#!/usr/bin/env node
const dotenv = require('dotenv');

const NODE_ENV = process.env.NODE_ENV;

const dotenvFiles = [
  '.env',
  // Don't include `.env.local` for `test` environment
  // since normally you expect tests to produce the same
  // results for everyone
  NODE_ENV === 'test' ? null : '.env.local',
  `.env.${NODE_ENV}`,
  `.env.${NODE_ENV}.local`
].filter(Boolean);

const env = {};

for (let dotenvFile of dotenvFiles) {
  const config = dotenv.config({ path: dotenvFile });
  if (config.parsed) {
    Object.assign(env, config.parsed);
  }
}

for (let key in env) {
  process.env[key] = env[key];
}

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');
const inputCmd = process.argv.slice(2).join(' ');

if (inputCmd === '--info') {
  const uiPkg = require(path.join(__dirname, 'ui/package.json'))
  console.log(`Current veda-ui: ${uiPkg.version}`);

  process.exit();
}

const rootDir = path.join(__dirname, '../');

// Compile SASS to CSS before running other commands
if (inputCmd !== 'clean' && inputCmd !== 'test') {
  console.log('Compiling SASS styles...');

  const uiDistStyles = path.join(__dirname, 'ui/static/styles');
  const mainTsxPath = path.join(__dirname, 'ui/app/scripts/main.tsx');

  if (!fs.existsSync(uiDistStyles)) {
    fs.mkdirSync(uiDistStyles, { recursive: true });
  }

  // Read the main.tsx file content and comment out styles.scss import.
  // The styles.scss import is only needed for the standalone veda-ui build, and contains
  // the core USWDS styles. The veda-config already includes its own core USWDS styles and
  // theme, thus we're avoiding duplications.
  try {
    const mainContent = fs.readFileSync(mainTsxPath, 'utf8');

    // Check if styles.scss is imported and not already commented out
    const hasStylesImport = mainContent.includes('import \'$styles/styles.scss\'') ||
                           mainContent.includes('import "$styles/styles.scss"');

    if (hasStylesImport) {
      console.log('Disabling full styles import for veda-config build...');

      // Remove the veda-ui specific import
      const modifiedContent = mainContent.replace(
        /import\s+['"][$]styles\/styles\.scss['"];(\r?\n)?/,
        ''
      );

      fs.writeFileSync(mainTsxPath, modifiedContent);
      console.log('Successfully disabled full styles import');
    }
  } catch (error) {
    console.error('Error while processing main.tsx:', error);
  }

  try {
    execSync(
      'sass --quiet-deps --load-path=node_modules/@uswds/uswds/packages styles/theme.scss .veda/ui/static/styles/theme.css',
      { stdio: 'inherit' }
    );
    console.log('SASS compilation successful');
  } catch (error) {
    console.error('SASS compilation failed:', error);
  }
}

const configFile = path.join(__dirname, '../veda.config.js');
process.env.VEDA_CONFIG_PATH = process.env.VEDA_CONFIG_PATH || configFile;

if (inputCmd === 'test') {
  const jestCli = path.join(__dirname, 'ui/node_modules/jest/bin/jest.js');
  const jestConfig = path.join(__dirname, 'ui/jest.config.js');
  const cmd = `node ${jestCli} ui/content-tests/* -c ${jestConfig}`;

  execSync(cmd, { stdio: 'inherit', cwd: path.join(__dirname, 'ui') });
  process.exit();
}

const gulpCli = path.join(__dirname, 'ui/node_modules/gulp-cli/bin/gulp.js');
const gulpConfig = path.join(__dirname, 'ui/gulpfile.js');

const cmd = `node ${gulpCli} --cwd ${rootDir} -f ${gulpConfig} ${inputCmd} --veda-config ${configFile}`;

execSync(cmd, { stdio: 'inherit' });

// Add a simple watcher for SASS files when serving
if (inputCmd === 'serve') {
  console.log('Starting SASS watcher...');
  const { spawn } = require('child_process');
  const sassWatch = spawn(
    'sass',
    [
      '--quiet-deps',
      '--watch',
      '--load-path=node_modules/@uswds/uswds/packages',
      'styles/theme.scss:.veda/ui/static/styles/theme.css'
    ],
    { stdio: 'inherit' }
  );

  process.on('SIGINT', () => {
    sassWatch.kill();
    process.exit();
  });
}